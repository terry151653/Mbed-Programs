#
# Generated by erpcgen 1.9.0 on Tue May 17 21:36:12 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BBCarService
class BBCarServiceService(erpc.server.Service):
    def __init__(self, handler):
        super(BBCarServiceService, self).__init__(interface.IBBCarService.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IBBCarService.STOP_ID: self._handle_stop,
                interface.IBBCarService.GOSTRAIGHT_ID: self._handle_goStraight,
                interface.IBBCarService.TURN_ID: self._handle_turn,
            }

    def _handle_stop(self, sequence, codec):
        # Read incoming parameters.
        car = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.stop(car)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.STOP_ID,
            sequence=sequence))

    def _handle_goStraight(self, sequence, codec):
        # Read incoming parameters.
        car = codec.read_uint8()
        speed = codec.read_int32()

        # Invoke user implementation of remote function.
        self._handler.goStraight(car, speed)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.GOSTRAIGHT_ID,
            sequence=sequence))

    def _handle_turn(self, sequence, codec):
        # Read incoming parameters.
        car = codec.read_uint8()
        speed = codec.read_int32()
        factor = codec.read_double()

        # Invoke user implementation of remote function.
        self._handler.turn(car, speed, factor)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.TURN_ID,
            sequence=sequence))


