#
# Generated by erpcgen 1.9.0 on Tue May 17 21:36:12 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BBCarService
class BBCarServiceClient(interface.IBBCarService):
    def __init__(self, manager):
        super(BBCarServiceClient, self).__init__()
        self._clientManager = manager

    def stop(self, car):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.STOP_ID,
                sequence=request.sequence))
        if car is None:
            raise ValueError("car is None")
        codec.write_uint8(car)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def goStraight(self, car, speed):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GOSTRAIGHT_ID,
                sequence=request.sequence))
        if car is None:
            raise ValueError("car is None")
        codec.write_uint8(car)
        if speed is None:
            raise ValueError("speed is None")
        codec.write_int32(speed)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def turn(self, car, speed, factor):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.TURN_ID,
                sequence=request.sequence))
        if car is None:
            raise ValueError("car is None")
        codec.write_uint8(car)
        if speed is None:
            raise ValueError("speed is None")
        codec.write_int32(speed)
        if factor is None:
            raise ValueError("factor is None")
        codec.write_double(factor)

        # Send request and process reply.
        self._clientManager.perform_request(request)



